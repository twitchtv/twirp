# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: snake_case_names.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='snake_case_names.proto',
  package='twirp.internal.twirptest.snake_case_names',
  syntax='proto3',
  serialized_pb=_b('\n\x16snake_case_names.proto\x12)twirp.internal.twirptest.snake_case_names\"`\n\x0eMakeHatArgs_v1\x1a\x33\n\x06Hat_v1\x12\x0c\n\x04size\x18\x01 \x01(\x05\x12\r\n\x05\x63olor\x18\x02 \x01(\t\x12\x0c\n\x04name\x18\x03 \x01(\t\x1a\x19\n\x07Size_v1\x12\x0e\n\x06inches\x18\x01 \x01(\x05\x32\xa1\x01\n\x0bHaberdasher\x12\x91\x01\n\nMakeHat_v1\x12\x41.twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Size_v1\x1a@.twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1B\x12Z\x10snake_case_namesb\x06proto3')
)




_MAKEHATARGS_V1_HAT_V1 = _descriptor.Descriptor(
  name='Hat_v1',
  full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='size', full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1.size', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='color', full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1.color', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='name', full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=87,
  serialized_end=138,
)

_MAKEHATARGS_V1_SIZE_V1 = _descriptor.Descriptor(
  name='Size_v1',
  full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Size_v1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='inches', full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Size_v1.inches', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=140,
  serialized_end=165,
)

_MAKEHATARGS_V1 = _descriptor.Descriptor(
  name='MakeHatArgs_v1',
  full_name='twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_MAKEHATARGS_V1_HAT_V1, _MAKEHATARGS_V1_SIZE_V1, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=69,
  serialized_end=165,
)

_MAKEHATARGS_V1_HAT_V1.containing_type = _MAKEHATARGS_V1
_MAKEHATARGS_V1_SIZE_V1.containing_type = _MAKEHATARGS_V1
DESCRIPTOR.message_types_by_name['MakeHatArgs_v1'] = _MAKEHATARGS_V1
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

MakeHatArgs_v1 = _reflection.GeneratedProtocolMessageType('MakeHatArgs_v1', (_message.Message,), dict(

  Hat_v1 = _reflection.GeneratedProtocolMessageType('Hat_v1', (_message.Message,), dict(
    DESCRIPTOR = _MAKEHATARGS_V1_HAT_V1,
    __module__ = 'snake_case_names_pb2'
    # @@protoc_insertion_point(class_scope:twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Hat_v1)
    ))
  ,

  Size_v1 = _reflection.GeneratedProtocolMessageType('Size_v1', (_message.Message,), dict(
    DESCRIPTOR = _MAKEHATARGS_V1_SIZE_V1,
    __module__ = 'snake_case_names_pb2'
    # @@protoc_insertion_point(class_scope:twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1.Size_v1)
    ))
  ,
  DESCRIPTOR = _MAKEHATARGS_V1,
  __module__ = 'snake_case_names_pb2'
  # @@protoc_insertion_point(class_scope:twirp.internal.twirptest.snake_case_names.MakeHatArgs_v1)
  ))
_sym_db.RegisterMessage(MakeHatArgs_v1)
_sym_db.RegisterMessage(MakeHatArgs_v1.Hat_v1)
_sym_db.RegisterMessage(MakeHatArgs_v1.Size_v1)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\020snake_case_names'))

_HABERDASHER = _descriptor.ServiceDescriptor(
  name='Haberdasher',
  full_name='twirp.internal.twirptest.snake_case_names.Haberdasher',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=168,
  serialized_end=329,
  methods=[
  _descriptor.MethodDescriptor(
    name='MakeHat_v1',
    full_name='twirp.internal.twirptest.snake_case_names.Haberdasher.MakeHat_v1',
    index=0,
    containing_service=None,
    input_type=_MAKEHATARGS_V1_SIZE_V1,
    output_type=_MAKEHATARGS_V1_HAT_V1,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_HABERDASHER)

DESCRIPTOR.services_by_name['Haberdasher'] = _HABERDASHER

# @@protoc_insertion_point(module_scope)
